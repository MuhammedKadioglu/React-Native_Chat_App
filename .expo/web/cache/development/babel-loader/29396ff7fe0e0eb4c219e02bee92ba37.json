{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"C:\\\\Users\\\\matem\\\\Desktop\\\\login\\\\src\\\\screens\\\\ForgotPasswordScreen.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { useState } from 'react';\nimport Background from \"../components/Background\";\nimport BackButton from \"../components/BackButton\";\nimport Logo from \"../components/Logo\";\nimport Header from \"../components/Header\";\nimport TextInput from \"../components/TextInput\";\nimport Button from \"../components/Button\";\nimport { emailValidator } from \"../helpers/emailValidator\";\nimport { sendEmailWithPassword } from \"../api/auth-api\";\nimport Toast from \"../components/Toast\";\n\nvar ForgotPasswordScreen = function ForgotPasswordScreen(_ref) {\n  var navigation = _ref.navigation;\n\n  var _useState = useState({\n    value: '',\n    error: ''\n  }),\n      _useState2 = _slicedToArray(_useState, 2),\n      email = _useState2[0],\n      setEmail = _useState2[1];\n\n  var _useState3 = useState(false),\n      _useState4 = _slicedToArray(_useState3, 2),\n      loading = _useState4[0],\n      setLoading = _useState4[1];\n\n  var _useState5 = useState({\n    value: '',\n    type: ''\n  }),\n      _useState6 = _slicedToArray(_useState5, 2),\n      toast = _useState6[0],\n      setToast = _useState6[1];\n\n  var sendResetPasswordEmail = function sendResetPasswordEmail() {\n    var emailError, response;\n    return _regeneratorRuntime.async(function sendResetPasswordEmail$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            emailError = emailValidator(email.value);\n\n            if (!emailError) {\n              _context.next = 4;\n              break;\n            }\n\n            setEmail(_objectSpread(_objectSpread({}, email), {}, {\n              error: emailError\n            }));\n            return _context.abrupt(\"return\");\n\n          case 4:\n            setLoading(true);\n            _context.next = 7;\n            return _regeneratorRuntime.awrap(sendEmailWithPassword(email.value));\n\n          case 7:\n            response = _context.sent;\n\n            if (response.error) {\n              setToast({\n                type: 'error',\n                message: response.error\n              });\n            } else {\n              setToast({\n                type: 'success',\n                message: 'Email with password has been sent.'\n              });\n            }\n\n            setLoading(false);\n\n          case 10:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  return React.createElement(Background, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 5\n    }\n  }, React.createElement(BackButton, {\n    goBack: navigation.goBack,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 7\n    }\n  }), React.createElement(Logo, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 7\n    }\n  }), React.createElement(Header, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 7\n    }\n  }, \"\\u015Eifre S\\u0131f\\u0131rlama\"), React.createElement(TextInput, {\n    label: \"E-mail adresi \",\n    returnKeyType: \"done\",\n    value: email.value,\n    onChangeText: function onChangeText(text) {\n      return setEmail({\n        value: text,\n        error: ''\n      });\n    },\n    error: !!email.error,\n    errorText: email.error,\n    autoCapitalize: \"none\",\n    autoCompleteType: \"email\",\n    textContentType: \"emailAddress\",\n    keyboardType: \"email-address\",\n    description: \"Size \\u015Fifre s\\u0131f\\u0131rlamak i\\xE7in bir email g\\xF6nderece\\u011Fiz.\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 7\n    }\n  }), React.createElement(Button, {\n    loading: loading,\n    mode: \"contained\",\n    onPress: sendResetPasswordEmail,\n    style: {\n      marginTop: 16\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }\n  }, \"G\\xF6nder\"), React.createElement(Toast, _extends({}, toast, {\n    onDismiss: function onDismiss() {\n      return setToast({\n        value: '',\n        type: ''\n      });\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }\n  })));\n};\n\nexport default ForgotPasswordScreen;","map":{"version":3,"sources":["C:/Users/matem/Desktop/login/src/screens/ForgotPasswordScreen.js"],"names":["React","useState","Background","BackButton","Logo","Header","TextInput","Button","emailValidator","sendEmailWithPassword","Toast","ForgotPasswordScreen","navigation","value","error","email","setEmail","loading","setLoading","type","toast","setToast","sendResetPasswordEmail","emailError","response","message","goBack","text","marginTop"],"mappings":"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","sourcesContent":["import React, { useState } from 'react'\nimport Background from '../components/Background'\nimport BackButton from '../components/BackButton'\nimport Logo from '../components/Logo'\nimport Header from '../components/Header'\nimport TextInput from '../components/TextInput'\nimport Button from '../components/Button'\nimport { emailValidator } from '../helpers/emailValidator'\nimport { sendEmailWithPassword } from '../api/auth-api'\nimport Toast from '../components/Toast'\n\nconst ForgotPasswordScreen = ({ navigation }) => {\n  const [email, setEmail] = useState({ value: '', error: '' })\n  const [loading, setLoading] = useState(false)\n  const [toast, setToast] = useState({ value: '', type: '' })\n\n  const sendResetPasswordEmail = async () => {\n    const emailError = emailValidator(email.value)\n    if (emailError) {\n      setEmail({ ...email, error: emailError })\n      return\n    }\n    setLoading(true)\n    const response = await sendEmailWithPassword(email.value)\n    if (response.error) {\n      setToast({ type: 'error', message: response.error })\n    } else {\n      setToast({\n        type: 'success',\n        message: 'Email with password has been sent.',\n      })\n    }\n    setLoading(false)\n  }\n\n  return (\n    <Background>\n      <BackButton goBack={navigation.goBack} />\n      <Logo />\n      <Header>Şifre Sıfırlama</Header>\n      <TextInput\n        label=\"E-mail adresi \"\n        returnKeyType=\"done\"\n        value={email.value}\n        onChangeText={(text) => setEmail({ value: text, error: '' })}\n        error={!!email.error}\n        errorText={email.error}\n        autoCapitalize=\"none\"\n        autoCompleteType=\"email\"\n        textContentType=\"emailAddress\"\n        keyboardType=\"email-address\"\n        description=\"Size şifre sıfırlamak için bir email göndereceğiz.\"\n      />\n      <Button\n        loading={loading}\n        mode=\"contained\"\n        onPress={sendResetPasswordEmail}\n        style={{ marginTop: 16 }}\n      >\n        Gönder\n      </Button>\n      <Toast {...toast} onDismiss={() => setToast({ value: '', type: '' })} />\n    </Background>\n  )\n}\n\nexport default ForgotPasswordScreen\n"]},"metadata":{},"sourceType":"module"}